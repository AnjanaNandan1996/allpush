student@T5:~$ cd ajce
student@T5:~/ajce$ cd mca
student@T5:~/ajce/mca$ cd lmca
student@T5:~/ajce/mca/lmca$ mkdir exprcommand
student@T5:~/ajce/mca/lmca$ cd ..
student@T5:~/ajce/mca$ cd ..
student@T5:~/ajce$ cd exprcommand
bash: cd: exprcommand: No such file or directory
student@T5:~/ajce$ cd mca
student@T5:~/ajce/mca$ cd lmca
student@T5:~/ajce/mca/lmca$ cd exprcommand
student@T5:~/ajce/mca/lmca/exprcommand$ expr 10 + 10
20
student@T5:~/ajce/mca/lmca/exprcommand$ expr 10 \ * 30
expr: syntax error
student@T5:~/ajce/mca/lmca/exprcommand$ expr 10 \* 30
300
student@T5:~/ajce/mca/lmca/exprcommand$ expr 10 * 30
300
student@T5:~/ajce/mca/lmca/exprcommand$ expr a * b
expr: non-integer argument
student@T5:~/ajce/mca/lmca/exprcommand$ expr a \* b
expr: non-integer argument
student@T5:~/ajce/mca/lmca/exprcommand$ expr 10 \* 30
300
student@T5:~/ajce/mca/lmca/exprcommand$ echo "enter two number"
enter two number
student@T5:~/ajce/mca/lmca/exprcommand$ read a
10
student@T5:~/ajce/mca/lmca/exprcommand$ read b
20
student@T5:~/ajce/mca/lmca/exprcommand$ sum='expr $a + $b'
student@T5:~/ajce/mca/lmca/exprcommand$ echo "result=$sum"
result=expr $a + $b
student@T5:~/ajce/mca/lmca/exprcommand$ ech sum

Command 'ech' not found, did you mean:

  command 'dch' from deb devscripts
  command 'ecl' from deb ecl
  command 'sch' from deb scheme2c
  command 'echo' from deb coreutils
  command 'ecc' from deb ecere-dev
  command 'ecp' from deb ecere-dev
  command 'bch' from deb bikeshed
  command 'ecs' from deb ecere-dev
  command 'ecj' from deb ecj
  command 'ecm' from deb gmp-ecm

Try: apt install <deb name>

student@T5:~/ajce/mca/lmca/exprcommand$ echo sum
sum
student@T5:~/ajce/mca/lmca/exprcommand$ echo $sum
expr $a + $b
student@T5:~/ajce/mca/lmca/exprcommand$ echo $result

student@T5:~/ajce/mca/lmca/exprcommand$ echo "enter two number"
enter two number
student@T5:~/ajce/mca/lmca/exprcommand$ read a
10    
student@T5:~/ajce/mca/lmca/exprcommand$ read b
20
student@T5:~/ajce/mca/lmca/exprcommand$ sum= `expr $a + $b`
30: command not found
student@T5:~/ajce/mca/lmca/exprcommand$ echo $sum
expr $a + $b
student@T5:~/ajce/mca/lmca/exprcommand$ echo $sum= `expr $a + $b`
expr $a + $b= 30
student@T5:~/ajce/mca/lmca/exprcommand$  $sum= `expr $a + $b`
expr: non-integer argument
student@T5:~/ajce/mca/lmca/exprcommand$ sum= `expr $a + $b`
30: command not found
student@T5:~/ajce/mca/lmca/exprcommand$ echo $sum
expr $a + $b
student@T5:~/ajce/mca/lmca/exprcommand$ sum= expr `$a + $b`
10: command not found
expr: missing operand
Try 'expr --help' for more information.
student@T5:~/ajce/mca/lmca/exprcommand$ sum=`expr $a + $b`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $sum
30
student@T5:~/ajce/mca/lmca/exprcommand$ expr --help
Usage: expr EXPRESSION
  or:  expr OPTION

      --help     display this help and exit
      --version  output version information and exit

Print the value of EXPRESSION to standard output.  A blank line below
separates increasing precedence groups.  EXPRESSION may be:

  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2

  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherwise 0

  ARG1 < ARG2       ARG1 is less than ARG2
  ARG1 <= ARG2      ARG1 is less than or equal to ARG2
  ARG1 = ARG2       ARG1 is equal to ARG2
  ARG1 != ARG2      ARG1 is unequal to ARG2
  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2
  ARG1 > ARG2       ARG1 is greater than ARG2

  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2
  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2

  ARG1 * ARG2       arithmetic product of ARG1 and ARG2
  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2
  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2

  STRING : REGEXP   anchored pattern match of REGEXP in STRING

  match STRING REGEXP        same as STRING : REGEXP
  substr STRING POS LENGTH   substring of STRING, POS counted from 1
  index STRING CHARS         index in STRING where any CHARS is found, or 0
  length STRING              length of STRING
  + TOKEN                    interpret TOKEN as a string, even if it is a
                               keyword like 'match' or an operator like '/'

  ( EXPRESSION )             value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else lexicographical.
Pattern matches return the string matched between \( and \) or null; if
\( and \) are not used, they return the number of characters matched or 0.

Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null
or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.

GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
Full documentation at: <http://www.gnu.org/software/coreutils/expr>
or available locally via: info '(coreutils) expr invocation'
student@T5:~/ajce/mca/lmca/exprcommand$ echo enter two numbers
enter two numbers
student@T5:~/ajce/mca/lmca/exprcommand$ read x
10
student@T5:~/ajce/mca/lmca/exprcommand$ read y
4
student@T5:~/ajce/mca/lmca/exprcommand$ mul='expr $x \* $y 
> ^C
student@T5:~/ajce/mca/lmca/exprcommand$ mul=`expr $x \* $y` 
student@T5:~/ajce/mca/lmca/exprcommand$ echo $mul
40
student@T5:~/ajce/mca/lmca/exprcommand$ x=10
student@T5:~/ajce/mca/lmca/exprcommand$ x=20
student@T5:~/ajce/mca/lmca/exprcommand$ res=`expr $x = $y`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $res
0
student@T5:~/ajce/mca/lmca/exprcommand$ res=`expr $x \< $y`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $res
0
student@T5:~/ajce/mca/lmca/exprcommand$ res=`expr $x \> $y`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $res
1
student@T5:~/ajce/mca/lmca/exprcommand$ res=`expr $x \! $y`
expr: syntax error
student@T5:~/ajce/mca/lmca/exprcommand$ res=`expr $x \!= $y`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $res
1
student@T5:~/ajce/mca/lmca/exprcommand$ x=Anjananandan
student@T5:~/ajce/mca/lmca/exprcommand$ y=`expr length $x`
student@T5:~/ajce/mca/lmca/exprcommand$ exho $y

Command 'exho' not found, did you mean:

  command 'echo' from deb coreutils

Try: apt install <deb name>

student@T5:~/ajce/mca/lmca/exprcommand$ echo $y
12
student@T5:~/ajce/mca/lmca/exprcommand$ u=amaljyothi
student@T5:~/ajce/mca/lmca/exprcommand$ v=`expr substr $u 2 8`
student@T5:~/ajce/mca/lmca/exprcommand$ echo $v
maljyoth
student@T5:~/ajce/mca/lmca/exprcommand$ 

